'''
Created on Jul 28, 2020

@author: duicul
'''
import sqlite3
import logging 
import traceback

class User:
    def __init___(self,user_name,password,mail):
        self.user_name=user_name
        self.password=password
        self.mail=mail
        
    def __str__(self):
        return self.user_name+" "+self.password

class User_Data:
    
    def __init___(self,database,logger_name):
        self.database=database
        self.logger_name=logger_name
    
    def getUser(self,user_name):
        conn = sqlite3.connect(self.database)
        mycursor=conn.cursor()
        querry="SELECT * FROM "+self.table_name+" WHERE USER_NAME='"+user_name+"'"
        mycursor.execute(querry)
        result=[]
        try:
            result=mycursor.fetchall()
            mycursor.close()
            conn.close()
        except:
            logging.getLogger(self.logger_name).error(str(traceback.format_exc()))
        user = None
        if(len(result>0)):
            user = User(result[0][0],result[0][1],result[0][2])
        return user
    
    def getAllUsers(self):
        conn = sqlite3.connect(self.database)
        mycursor=conn.cursor()
        querry="SELECT * FROM "+self.table_name
        mycursor.execute(querry)
        result=[]
        users=[]
        try:
            result=mycursor.fetchall()
            mycursor.close()
            conn.close()
        except:
            logging.getLogger(self.logger_name).error(str(traceback.format_exc()))
        user = None
        for rec in result:
            users.push(User(rec[0],rec[1],rec[2]))
        return users
    
    def removeUser(self,user_name):
        conn = sqlite3.connect(self.database)
        mycursor=conn.cursor()
        querry="DELETE * FROM "+self.table_name+" WHERE USER_NAME='"+user_name+"'"
        mycursor.execute(querry)
        try:
            conn.commit()
            mycursor.close()
            conn.close()
        except:
            logging.getLogger(self.logger_name).error(str(traceback.format_exc()))
    
    def addUser(self,user):
        conn = sqlite3.connect(self.database)
        vals=[(user.user_name,user.password,user.mail)]
        mycursor=conn.cursor()
        sql = """INSERT INTO """+self.table_name+""" (USER_NAME,PASSWORD,MAIL) VALUES (?,?,?)"""
        mycursor.executemany(sql,vals)
        try:
            conn.commit()
            mycursor.close()
            conn.close()
        except:
            logging.getLogger(self.logger_name).error(str(traceback.format_exc()))
    
    def create_table(self):
        conn = sqlite3.connect(self.database)
        cursor=conn.cursor()
        sql="CREATE TABLE IF NOT EXISTS "+self.table_name+" ("
        sql+="ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ,"
        sql+="USER_NAME VARCHAR(32) NOT NULL UNIQUE,"
        sql+="PASSWORD VARCHAR(128) NOT NULL,"
        sql+="MAIL VARCHAR(32) NOT NULL);"
        try:
            cursor.execute(sql)
            logging.getLogger(self.logger_name).debug(self.table_name+" created ")
            cursor.close()
            conn.close()
        except:
            logging.getLogger(self.logger_name).warning(str(traceback.format_exc()))
            
if __name__ == '__main__':
    #ac=AC_Data("measure.db","random","random")
    #ac.insert(221,6.3,170,5478)
    ud=User_Data("user.db","random")
    ud.create_table()
    #tsd.insert(1,42.3)
    print(tsd.extract_all_interval(""))
    #tsd.convert_old()
    #td.insert(20,30)
    #print(ac.extract_last())
    #print(ac.extract_all_interval(2))
    pass